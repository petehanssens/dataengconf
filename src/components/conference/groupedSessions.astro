---
import {fetchData} from './allData.astro'

export async function getConfDetail(apiUrl) {
    const conferenceData = await fetchData(apiUrl);
    function FetchSpeakerDetails(id) {
    
        return conferenceData.speakers.filter(obj => {
            return obj.id == id
        })[0]
    }
  conferenceData.sessions.map((e: any) => {
  
    // const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    // const simpleOptions = { year: 'numeric', month: 'numeric', day: 'numeric' };
    // const newDate = new Date(e.startsAt).toLocaleDateString("en-AU", options)
    // const simpleDate = new Date(e.startsAt).toLocaleDateString("en-AU", simpleOptions)
    // const [day, month, year] = new Date(e.startsAt).toLocaleDateString('en-AU').split('/');
    // const result = [year, month, day].join('-');

    // e.goodDate = result
    // e.prettyDate = newDate
    // e.simpleDate = simpleDate
    // if (result == "2022-09-27") {
    //   e.city = "Melbourne";
    // } else if (result == "2022-09-29") {
    //   e.city = "Sydney"
    // } else {
    //   e.city = "Unknown"
    // }
    // e.date = new Date(e.startsAt).toLocaleDateString('en-AU')
    e.speakerObject = []
    e.speakers.map((s) => {
      const details = FetchSpeakerDetails(s)
      e.speakerObject.push(details)
    })
  })

  const groupedSessions = Object.entries(
    conferenceData.sessions.reduce((acc, { id, title, city, description, startsAt, endsAt, isServiceSession, goodDate, speakerObject }) => {
      if (!acc[goodDate]) {
        acc[goodDate] = [];
      }
      acc[goodDate].push({ id, title, city, description, startsAt, endsAt, isServiceSession, speakerObject });
      return acc;
    }, {})
  ).map(([goodDate, sessions]) => ({ goodDate, sessions }));
  return groupedSessions;
}
---